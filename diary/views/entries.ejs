<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdn.tiny.cloud/1/u224myd2678g6mwhzrq6spaskic2pffg8prygf5jdojsm1hp/tinymce/5/tinymce.min.js"
        referrerpolicy="origin"></script>
    <style>
        .card {
            margin-bottom: 20px;
            cursor: pointer;
        }

        .card:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .card-body {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .clear-left-margin {
            clear: left;
        }
    </style>
</head>

<body>
    <%- include('header') %>
        <%- include('Toast') %>
            <div class="container">
                <div class="mb-3">
                    <label for="filterInput">Filter Entries by Keyword:</label>
                    <input type="text" class="form-control" id="filterInput" placeholder="Enter keyword">
                </div>
                <div class="mb-3">
                    <label for="filterDate">Filter Entries by Date:</label>
                    <input type="date" class="form-control" id="filterDate" pattern="\d{4}-\d{2}-\d{2}">
                </div>
                <% if (entries.length> 0) { %>
                    <h1 class="text-center">Your Diary Entries</h1>
                    <div class="row">
                        <% entries.forEach((entry)=> { %>
                            <div class="col-md-4 card d-none clear-left-margin">
                                <div class="card">
                                    <div class="card-body" data-toggle="modal" data-target="#viewModal<%= entry._id %>"
                                        id="entryBody-<%= entry._id %>">
                                        <div class="card-text">
                                            <div id="displayEntryBody-<%= entry._id %>"><%- entry.body %></div>
                                        </div>
                                        <br>
                                    </div>
                                    <div class="card-footer text-muted">
                                        Created on: <p class="createdDate-<%= entry._id %>"></p>

                                        <button class="btn btn-primary" data-toggle="modal"
                                            data-target="#editModal<%= entry._id %>">Edit</button>
                                        <button class="btn btn-danger"
                                            onclick="deleteEntry('<%= entry._id %>')">Delete</button>
                                    </div>
                                </div>


                                <!-- Edit Modal -->
                                <div class="modal fade" id="editModal<%= entry._id %>" tabindex="-1" role="dialog"
                                    aria-labelledby="editModalLabel<%= entry._id %>" aria-hidden="true">
                                    <div class="modal-dialog modal-lg" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="editModalLabel<%= entry._id %>">Edit Entry
                                                </h5>
                                                <button type="button" class="close" data-dismiss="modal"
                                                    aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <form action="/entries/<%= entry._id %>" method="PUT">
                                                    <div class="form-group">
                                                        <label for="editDate">Date:</label>
                                                        <input type="date" class="form-control"
                                                            id="editDate-<%= entry._id %>" name="date"
                                                            value="<%= entry.date %>" required>
                                                    </div>
                                                    <div class="form-group">
                                                        <label for="editTitle">Title:</label>
                                                        <input type="text" class="form-control"
                                                            id="editTitle-<%= entry._id %>" name="title"
                                                            value="<%= entry.title %>" required>
                                                    </div>
                                                    <div class="form-group">
                                                        <label for="editBody">Body:</label>
                                                        <textarea class="form-control" id="editBody-<%= entry._id %>"
                                                            name="body" rows="8" required><%- entry.body %></textarea>
                                                    </div>
                                                    <button type="submit" class="btn btn-primary"
                                                        onclick="submitForm('<%= entry._id %>')">Update Entry</button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- View Modal -->
                                <div class="modal fade" id="viewModal<%= entry._id %>" tabindex="-1" role="dialog"
                                    aria-labelledby="viewModalLabel<%= entry._id %>" aria-hidden="true">
                                    <div class="modal-dialog modal-lg" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="viewModalLabel<%= entry._id %>">
                                                    <b><%-entry.date%></b>
                                                </h5>
                                                <button type="button" class="close" data-dismiss="modal"
                                                    aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <div id="viewEntryBody-<%= entry._id %>"><%- entry.body %></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <script>
                                    if ('<%- entry.createdAt %>' != '<%- entry.updatedAt %>') {
                                        document.querySelector('.createdDate-<%= entry._id %>').innerHTML = formatDateTime('<%- entry.createdAt %>') + "<br>Updated at:</b><br>" + formatDateTime('<%- entry.updatedAt %>');
                                    }
                                    else {
                                        document.querySelector('.createdDate-<%= entry._id %>').innerHTML = formatDateTime('<%- entry.createdAt %>') + '<br>' + '<br>' + '<br>';
                                    }
                                    function formatDateTime(dateTimeString) {
                                        const options = {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: 'numeric'
                                        };
                                        const dateTime = new Date(dateTimeString);
                                        return dateTime.toLocaleDateString('en-US', options);
                                    }

                                    function deleteEntry(entryId) {
                                        if (confirm("Are you sure you want to delete this entry?")) {
                                            fetch(`/entries/${entryId}`, {
                                                method: 'DELETE',
                                            })
                                                .then(response => {
                                                    if (!response.ok) {
                                                        throw new Error('Network response was not ok');
                                                    }
                                                    return response.json();
                                                })
                                                .then(data => {
                                                    console.log('Entry deleted:', data);
                                                    location.reload();
                                                })
                                                .catch(error => {
                                                    console.error('There was a problem with the fetch operation:', error);
                                                });
                                        }
                                    }

                                    function submitForm(entryId) {
                                        const title = document.getElementById('editTitle-' + entryId).value;
                                        const date = document.getElementById('editDate-' + entryId).value;
                                        const body = tinymce.get('editBody-' + entryId).getContent();

                                        fetch(`/entries/${entryId}`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({ title, date, body }),
                                        })
                                            .then(response => {
                                                if (!response.ok) {
                                                    throw new Error('Network response was not ok');
                                                }
                                                return response.json();
                                            })
                                            .then(data => {
                                                console.log('Entry updated:', data);
                                                location.reload();
                                            })
                                            .catch(error => {
                                                console.error('There was a problem with the fetch operation:', error);
                                            });
                                    }

                                    tinymce.init({
                                        apiKey: 'u224myd2678g6mwhzrq6spaskic2pffg8prygf5jdojsm1hp',
                                        selector: '#editBody-<%= entry._id %>',
                                        height: 500,
                                        toolbar: 'formatselect | bold italic lists underline strikethrough | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image table hr',
                                        plugins: 'link image imagetools table hr',
                                        menubar: false,
                                        content_style: 'body { font-family: Arial, sans-serif; font-size: 16px; }',
                                        setup: function (editor) {
                                            editor.on('init', function () { });
                                            editor.on('change', function () { });
                                        }
                                    });

                                </script>
                            </div>

                            <% }); %>
                    </div>
                    <% } else { %>
                        <h1 class="text-center">No Diary Entries Found</h1>
                        <% } %>
            </div>

            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    // Add an initial call to filterEntries when the page is loaded
                    filterEntries();

                    // Add input event listeners to the filter inputs
                    const filterInput = document.getElementById('filterInput');
                    const filterDate = document.getElementById('filterDate');

                    filterInput.addEventListener('input', filterEntries);
                    filterDate.addEventListener('input', filterEntries);
                });

                function filterEntries() {
                    const keyword = document.getElementById('filterInput').value.toLowerCase();
                    const date = document.getElementById('filterDate').value;
                    const cards = document.querySelectorAll('.card');
                    let cardsInRow = 0;
                    let anyCardVisible = false;

                    cards.forEach(card => {
                        const entryId = card.querySelector('.card-body').id.split('-')[1];
                        const entryText = document.getElementById('entryBody-' + entryId).innerText.toLowerCase();
                        const entryDate = document.getElementById('editDate-' + entryId).value;
                        const matchesKeyword = entryText.includes(keyword);
                        const matchesDate = date === '' || (new Date(entryDate).toISOString().split('T')[0] === date);

                        if ((matchesKeyword || keyword === '') && matchesDate) {
                            card.classList.remove('d-none'); // Show the card
                            cardsInRow++;
                            anyCardVisible = true;

                            if (cardsInRow % 3 === 0) {
                                card.classList.add('clear-left-margin');
                            } else {
                                card.classList.remove('clear-left-margin');
                            }
                        } else {
                            card.classList.add('d-none'); // Hide the card
                            card.classList.remove('clear-left-margin');
                        }
                    });

                    if (!anyCardVisible) {
                        // If no cards match the filter, show all cards
                        cards.forEach(card => {
                            card.classList.remove('d-none');
                            card.classList.remove('clear-left-margin');
                        });
                    }

                }






            </script>
</body>

</html>